// Code generated by silly-enum-codegen. DO NOT EDIT.

package {{.Package}}

import (
	"encoding/json"
	"errors"
	"fmt"
)

var Err{{.Enum}}InvalidValue = errors.New("{{.Enum}} invalid value")

func (v {{.Enum}}) String() string {
	switch v {
{{range .Values}}
	case {{.}}:
		return "{{.}}"
{{end}}
	default:
		return fmt.Sprintf("{{.Enum}}=%v", {{.BaseType}}(v))
	}
}

func (v *{{.Enum}}) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.String())
}

func (v *{{.Enum}}) UnmarshalJSON(data []byte) error {
	{
		var s string
		if err := json.Unmarshal(data, &s); err == nil {
			switch s {
		{{range .Values}}
			case "{{.}}":
				*v = {{.}}
		{{end}}
			default:
				return fmt.Errorf("%q: %w", s, Err{{.Enum}}InvalidValue)
			}

			return nil
		}
	}

	var n {{.BaseType}}

	if err := json.Unmarshal(data, &n); err != nil {
		return fmt.Errorf("parsing {{.Enum}} value: %w", err)
	}

	switch {{.Enum}}(n) {
{{range .Values}}
	case {{.}}:
	*v = {{.}}
{{end}}
	default:
		return fmt.Errorf("%v: %w", n, Err{{.Enum}}InvalidValue)
	}

	return nil
}
