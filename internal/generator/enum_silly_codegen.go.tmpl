// Code generated by silly-enum-codegen. DO NOT EDIT.

package {{.Package.Name}}

import (
	"encoding/json"
	"errors"
	"fmt"
)

{{range .Enums}}

/// {{.Name}} //////

var Err{{.Name}}InvalidValue = errors.New("{{.Name}} invalid value")

func (v {{.Name}}) String() string {
    s, _ := v.string()

	return s
}

func (v {{.Name}}) string() (string, error) {
	switch v {
{{range .Values}}
	case {{.}}:
		return "{{.}}", nil
{{end}}
	default:
		return fmt.Sprintf("{{.Name}}=%v", {{.BaseType}}(v)),
		    fmt.Errorf("%v: %w", {{.BaseType}}(v), Err{{.Name}}InvalidValue)
	}
}

func (v *{{.Name}}) Set(s string) error {
	switch s {
{{range .Values}}
	case "{{.}}":
		*v = {{.}}
{{end}}
	default:
		return fmt.Errorf("%q: %w", s, Err{{.Name}}InvalidValue)
	}

	return nil
}

func ({{.Name}}) Type() string {
	return "{{.Name}}"
}


func (v {{.Name}}) MarshalJSON() ([]byte, error) {
    s, err := v.string()
    if err != nil {
        return nil, err
    }

    return json.Marshal(s)
}

func (v *{{.Name}}) UnmarshalJSON(data []byte) error {
	{
		var s string

		if err := json.Unmarshal(data, &s); err == nil {
		    return v.Set(s)
		}
	}

	var n {{.BaseType}}

	if err := json.Unmarshal(data, &n); err != nil {
		return fmt.Errorf("parsing {{.Name}} value: %w", err)
	}

	switch {{.Name}}(n) {
{{range .Values}}
	case {{.}}:
	*v = {{.}}
{{end}}
	default:
		return fmt.Errorf("%v: %w", n, Err{{.Name}}InvalidValue)
	}

	return nil
}

func (v {{.Name}}) MarshalText() (text []byte, err error) {
    s, err := v.string()
    if err != nil {
        return nil, err
    }

    return []byte(s), nil
}

func (v *{{.Name}}) UnmarshalText(text []byte) error {
	return v.Set(string(text))
}

{{end}}